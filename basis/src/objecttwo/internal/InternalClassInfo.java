package objecttwo.internal;

/**
 * 内部类-介绍
 *
 * 内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类
 *
 * 内部类成员可以直接访问外部类的私有数据, 因为内部类被当成其外部类成员，同一个类的成员之间可以互相访问。但外部类不能访问内部类的实现细节，例如内部类的成员变量。
 *
 * 匿名内部类适合用于创建那些仅需要一次使用的类。对于前面介绍的命令模式，当需要传入一个Command 对象时，
 * 重新专门定义PrintCommand 和AddCommand 两个实现类可能没有太大的意义， 因为这两个实现类可能仅需要使用一次。在这种情况下， 使用匿名内部类将更方便。
 *
 * 内部类比外部类可以多使用三个修饰符: private 、protected 、statÍc一一外部类不可以使用这三个修饰符。
 *
 * 非静态内部类不能拥有静态成员。
 *
 * 定义内部类非常简单，只要把一个类放在另一个类内部定义即可。此处的" 类内部"包括类中的任何位置，甚至在方法中也可以定义内部类
 * 方法里定义的内部类被称为局部内部类. 内部类定义语法格式如下:
 * public class A{
 *     // 此处可以定义内部类
 * }
 *
 * 大部分时候，内部类都被作为成员内部类定义，而不是作为局部内部类。成员内部类是一种与成员变量、方法、构造器和初始化块相似的类成员:
 * 局部内部类和匿名内部类则不是类成员。
 *
 * 成员内部类分为两种: 静态内部类和非静态内部类，使用static 修饰的成员内部类是静态内部类，没有使用statÍc 修饰的成员内部类是非静态内部类。
 *
 * 当看到同一个Java 源文件里定义了多个类，那种情况不是内部类，它们依然是两个互相独立的类。例如下面程序:
 * public class A{ }
 * class B{ }
 * 上面两个类定义虽然写在同一个源文件中，但它们互相独立，没有谁是谁的内部类这种关系。内部类一定是放在另一个类的类体部分
 * 也就是类名后的花括号部分定义。
 *
 * 因为内部类作为其外部类的成员， 所以可以使用任意访问控制符如private 、protected 和public 等修饰
 *
 * 扩展：
 * 外部类的上一级程序单元是包，
 * 所以它只有2 个作用域:同一个包内和任何位置
 * 因此只需2 种访问权限:包访问权限和公开访问权限
 * 正好对应省略访问控制符和public访问控制符
 * 省略访问控制符是包访问权限，即同一包中的其他类可以访问省咯访问控制符的成员。因此，如果一个外部类不使用任何访问控制符修饰， 则只能被同一个包中其他类访问。
 * 而内部类的上一级程序单元是外部类，它就具有4 个作用域: 同一个类、同一个包、义子类和任何位直，因此可以使用4 种访问控制权限。
 *
 * @author JIE
 */
public class InternalClassInfo {
}
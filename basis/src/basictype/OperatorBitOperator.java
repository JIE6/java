package basictype;

/**
 * 重点
 * 运算符-位运算符
 * Java 支持的位运算符有如下7 个。
 * & : 按位与。当两位同时为1时才返回1。
 * | : 按位或。只要有一位为1 即可返回1。
 * ~ : 按位非。单目运算符，将操作数的每个位(包括符号位）全部取反。（正数按位非后为他的相反数+1，负数按位非后为他的相反数-1）
 * ^ :按位异或。当两位相同时返回0 ， 不同时返回1。
 * << : 左移运算符。
 * >> : 右移运算符。
 * >>> : 无符号右移运算符。
 * 一般来说，位运算符只能操作整数类型的变量或值。位运算符的运算法则如下
 * 第一个操作数   第二个操作数  按位与 按位或 按位异或
 * 0                0           0   0       0
 * 0                1           0   1       1
 * 1                0           0   1       1
 * 1                1           1   1       0
 * 按位非只需要一个操作数，这个运算符将把操作数在计算机底层的二进制码按位(包括符号位)取反
 * @author JIE
 */
public class OperatorBitOperator {

    public static void main(String[] args) {
        /*
         * &    将输出 1
         * 原理如下：
         * 5 的二进制码是 00000101 (省略了前面的24 个0)
         * 9 的二进制码是 00001001 (省略了前面的24 个0 )
         * 1 的二进制码是 00000001 (省略了前面的24 个0 )
         */
        System.out.println(5 & 9);
        /*
         * |    将输出 13
         * 原理如下：
         * 5 的二进制码是 00000101 (省略了前面的24 个0)
         * 9 的二进制码是 00001001 (省略了前面的24 个0 )
         * 13的二进制码是 00001101 (省略了前面的24 个0 )
         */
        System.out.println(5 | 9);
        /*
         * ^    将输出 12
         * 原理如下：
         * 5 的二进制码是 00000101 (省略了前面的24 个0)
         * 9 的二进制码是 00001001 (省略了前面的24 个0 )
         * 13的二进制码是 00001100 (省略了前面的24 个0 )
         */
        System.out.println(5 ^ 9);
        /*
         * ~    将输出 -6
         * 原理如下：
         * 5 的二进制码是 00000101 (省略了前面的24 个0)
         * 取反后位
         *              11111010 (省略了前面的24 个1)
         * 因为高位是1，所以原码为负数，负数的补码是其绝对值的原码取反，末尾再减1。
         *              11111001 (省略了前面的24 个1)
         * 最后将各位取反得原码：
         *              00000110 (省略了前面的24 个0)
         */
        System.out.println(~5);
        /*
         * ~    将输出 -10
         * 原理如下：
         * 9 的二进制码是 00001001 (省略了前面的24 个0)
         * 取反后位
         *              11110110 (省略了前面的24 个1)
         * 因为高位是1，所以原码为负数，负数的补码是其绝对值的原码取反，末尾再减1。
         *              11110101 (省略了前面的24 个1)
         * 最后将各位取反得原码：
         *              00001010 (省略了前面的24 个0)
         */
        System.out.println(~9);
        /*
         * <<    将输出 160
         * 原理如下：
         * 5 的二进制码是 00000101 (省略了前面的24 个0)
         * 向左移五位后是
         *              10100000 (省略了前面的24 个0)
         */
        System.out.println(5<<5);
        /*
         * >>    将输出 7
         * 原理如下：
         * 120的二进制码是 01111000 (省略了前面的24 个0)
         * 向右边移四位后是
         *               00000111 (省略了前面的24 个0)
         */
        System.out.println(120>>4);
        /*
         * >>    将输出 7
         * 原理如下：
         * 120的二进制码是 01111000 (省略了前面的24 个0)
         * 向右边移四位后是
         *               00000111 (省略了前面的24 个0)
         */
        System.out.println(120>>>4);
        /*
         * >>    将输出 268435448
         * 原理如下：
         *-120的二进制码是 10000000000000000000000001111000
         * 取反后位        11111111111111111111111110000111
         * 向右边移四位后是 00001111111111111111111111111000
         *
         */
        System.out.println(-120>>>4);
    }
}

package objectone;

/**
 * 重点
 * 隐藏和封装
 * -------------------------------------------------------------------------------------------------------------------------------------
 * 在前面程序中经常出现通过某个对象的直接访问其成员变量的情形，这可能引起一些潜在的问题，
 * 比如将某个Person 的age 成员变量直接设为1000 ，这在语法上没有任何问题，但显然违背了现实。因此， Java 程序推荐将类和对象的成员变量进行封装。
 * -------------------------------------------------------------------------------------------------------------------------------------
 * 理解封装：
 * 封装(Encapsulation) 是面向对象的三大特征之一(另外两个是继承和多态)
 * 它指的是将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法来实现对内部信息的操作和访问。
 * 封装是面向对象编程语言对客观世界的模拟，在客观世界里，对象的状态信息都被隐藏在对象内部，
 * 外界无法直接操作和修改。就如刚刚说的Person 对象的age 变量，只能随着岁月的流逝， age 才会增加，
 * 通常不能随意修改Person 对象的age 。对一个类或对象实现良好的封装，可以实现以下目的。
 * 1.隐藏类的实现细节。
 * 2.让使用者只能通过事先预定的方法来访问数据，从而可以在该方法里加入控制逻辑，限制对成员变量的不合理访问。
 * 3.可进行数据检查，从而有利于保证对象信息的完整性。
 * 4.便于修改，提高代码的可维护性。
 * 为了实现良好的封装， 需要从两个方面考虑：
 * 1.将对象的成员变量和实现细节隐藏起来，不允许外部直接访问。
 * 2.把方法暴露出来，让方法来控制对这些成员变量进行安全的访问和操作。
 * 因此，封装实际上有两个方面的含义:把该隐藏的隐藏起来，把该暴露的暴露出来。这两个方面都需要通过使用Java 提供的访问控制符来实现。
 * -------------------------------------------------------------------------------------------------------------------------------------
 * 使用访问控制符
 * Java 提供了3 个访问控制符: private 、protected 和public ，分别代表了3 个访问控制级别，另外还有一个不加任何访问控制符的访问控制级别，提供了4 个访问控制级别。
 * Java 的访问控制级别由小到大为：
 * private      ->      default     ->      protected       ->      public
 * 上面的4 个访问控制级别中的default 并没有对应的访问控制符，当不使用任何访问控制符来修饰类或类成员时， 系统默认使用该访问控制级别。
 * 这4 个访问控制级别的详细介绍如下：
 * private：(当前类访问权限):如果类里的一个成员(包括成员变量、方法和构造器等)使用private访问控制符来修饰，则这个成员只能在当前类的内部被访问。
 * 很显然，这个访问控制符用于修饰成员变量最合适， 使用它来修饰成员变量就可以把成员变量隐藏在该类的内部。
 * default：(包访问权限) : 如果类里的一个成员(包括成员变量、方法和构造器等)或者一个外部类不使用任何访问控制符修饰，
 * 就称它是包访问权限的，default 访问控制的成员或外部类可以被相同包下的其他类访问。
 * protected：(子类访问权限) : 如果一个成员(包括成员变量、方法和构造器等)使用protected 访问控制符修饰，那么这个成员既可以被同一个包中的其他类访问，
 * 也可以被不同包中的子类访问。在通常情况下，如果使用protected 来修饰一个方法，通常是希望其子类来重写这个方法。
 * public (公共访问权限) : 这是一个最宽松的访问控制级别，如果一个成员(包括成员变量、方法和构造器等)或者一个外部类使用public 访问控制符修饰，
 * 那么这个成员或外部类就可以被所有类访问， 不管访问类和被访问类是否处于同一个包中，是否具有父子继承关系。
 * 总结上述的访问控制级别：
 *              private     default     protected       public
 * 同一类中          √          √          √                √
 * 同一包中                     √          √                √
 * 子类中                                  √                √
 * 全局范围内                                                √
 * -------------------------------------------------------------------------------------------------------------------------------------
 * 提示：如果一个Java 源文件里定义的所有类都没有使用public 修饰，则这个Java 源文件的文件名可以是一切合法的文件名;
 * 但如果一个Java 源文件里定义了一个public 修饰的类，则这个源文件的文件名必须与public 修饰的类的类名相同。
 * -------------------------------------------------------------------------------------------------------------------------------------
 * @author JIE
 */
public class Encapsulation {

    public static void main(String[] args) {
        PersonEncapsulation pe = new PersonEncapsulation();
        // 因为age 成员变量己被隐藏，所以下面语句将出现编译错误
        // pe.age = 10;
        // 下面语句编译不会出现错误，但运行时将提示"您设置的年龄不合法", 程序不会修改p 的age 成员变量
        pe.setAge(1000);
        System.out.println("未能成功设置age时，age="+pe.getAge());
        pe.setAge(999);
        System.out.println("成功设置age时，age="+pe.getAge());
    }
}

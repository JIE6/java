package objectone;

/**
 * 静态初始化块
 *
 * 如果定义初始化块时使用了static 修饰符，则这个初始化块就变成了静态初始化块，也被称为类初始化块(普通初始化块负责对对象执行初始化，类初始化块则负责对类进行初始化) 。
 * 静态初始化块是类相关的， 系统将在类初始化阶段执行静态初始化块，而不是在创建对象时才执行。因此静态初始化块总是比普通初始化块先执行。
 *
 * 静态初始化块是类相关的，用于对整个类进行初始化处理，通常用于对类变量执行初始化处理。静态初始化块不能对实例变量进行初始化处理。
 *
 * 静态初始化块也被称为类初始化块，也属于类的静态成员，同样需要遵循静态成员不能访问非静态成员的规则，因此静态初始化块不能访问非静态成员，包括不能访问实例变量和实例方法.
 *
 * 与普通初始化块类似的是，系统在类初始化阶段执行静态初始化块时，不仅会执行本类的静态初始化块，而且还会一直上溯到java .lang.Object 类(如果它包含静态初始化块) ，
 * 先执行java .lang.Object 类的静态初始化块(如果有)，然后执行其父类的静态初始化块…… 最后才执行该类的静态初始化块，
 * 经过这个过程，才完成了该类的初始化过程。只有当类初始化完成后，才可以在系统中使用这个类，包括访问这个类的类方法、类变量或者用这个类来创建实例。
 *
 *
 * @author JIE
 */
public class StaticInitBlock {

    static {
        a = 6;
    }
    static int a = 9;

    public static void main(String[] args) {
        /**
         * 静态初始化块和声明静态成员变量时所指定的初始值都是该类的初始化代码，它们的执行顺序与源程序中的排列顺序相同
         */
        System.out.println(a);
    }
}
